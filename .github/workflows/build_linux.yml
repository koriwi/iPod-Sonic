# This workflow will build a golang project
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-go

name: Build Linux
permissions:
  contents: write # access to check out code and install dependencies
on:
  push:
    branches: ["master"]
  pull_request:
    branches: ["master"]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: "1.24"
      - name: install dependencies
        run: |
          sudo apt update
          sudo apt install -y ffmpeg build-essential pkg-config libltdl-dev

      - name: Cache ImageMagick build
        uses: actions/cache@v4
        id: imagemagick-build-cache
        with:
          path: ./ImageMagick-7.1.1-29
          key: ${{ runner.os }}-imagemagick-7.1.1-29-build

      - name: Download and build ImageMagick 7 (if not cached)
        if: steps.imagemagick-build-cache.outputs.cache-hit != 'true'
        run: |
          echo "Building ImageMagick 7 from source..."
          wget https://github.com/ImageMagick/ImageMagick/archive/7.1.1-29.tar.gz
          tar xzf 7.1.1-29.tar.gz
          cd ImageMagick-7.1.1-29

          # Configure and build ImageMagick 7
          ./configure \
            --prefix=/usr/local \
            --enable-shared \
            --disable-static \
            --with-modules \
            --with-quantum-depth=16 \
            --without-perl

          make -j$(nproc)
          pwd
          cd ..
      - name: Install ImageMagick 7
        run: |
          cd ImageMagick-7.1.1-29
          sudo make install
          cd ..

      - name: Set up ImageMagick environment
        run: |
          sudo ldconfig
          echo "PKG_CONFIG_PATH=/usr/local/lib/pkgconfig:$PKG_CONFIG_PATH" >> $GITHUB_ENV

      - uses: actions/checkout@v4
      - name: Build
        run: go build -x -v ./rocksonic.go
        env:
          CGO_ENABLED: 1
      - name: Create release assets
        run: |
          SHORT_SHA=$(echo ${{ github.sha }} | cut -c1-8)
          BUILD_DATE=$(date -u +"%Y-%m-%d")

          # Create checksums
          sha256sum rocksonic > checksums.txt

          # Create release notes
          cat > release-notes.md << EOF
          # Latest Build - $BUILD_DATE

          **Commit:** [\`$SHORT_SHA\`](${{ github.server_url }}/${{ github.repository }}/commit/${{ github.sha }})

          ## Download
          - **Linux AMD64**: \`rocksonic\`

          ## Installation
          1. Download the binary
          2. Make it executable: \`rocksonic\`
          3. Run it: \`./rocksonic\`

          ## Requirements
          - This binary requires ImageMagick 7 and ffmpeg to be installed on the target system
          - On Ubuntu/Debian: \`sudo apt install imagemagick ffmpeg\`

          ## Build Information
          - **Built on:** $BUILD_DATE
          - **Go Version:** $(go version)
          - **ImageMagick Version:** $(magick -version | head -1)
          - **Git SHA:** ${{ github.sha }}
          - **Binary Size:** $(du -h ./rocksonic | cut -f1)

          ## Verification
          Verify file integrity using SHA256:
          \`\`\`bash
          sha256sum -c checksums.txt
          \`\`\`
          EOF

      - name: Delete previous latest release
        run: |
          # Delete the previous "latest" release and tag if they exist
          gh release delete latest --yes || echo "No previous 'latest' release found"
          git push --delete origin latest || echo "No previous 'latest' tag found"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create latest release
        run: |
          SHORT_SHA=$(echo ${{ github.sha }} | cut -c1-8)
          BUILD_DATE=$(date -u +"%Y-%m-%d")

          git tag latest
          git push origin latest

          gh release create latest \
            --title "Latest Build" \
            --notes "Built from commit $SHORT_SHA on $BUILD_DATE" \
            --latest \
            rocksonic \
            checksums.txt
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
